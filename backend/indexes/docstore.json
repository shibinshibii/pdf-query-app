{"docstore/metadata": {"baaed2f3-c76c-4532-a98f-48233d24d01c": {"doc_hash": "d8e5c0679f4782727ba79b58bcaacf5e3cb545b88856bee4fccfa18ff36011c9"}, "e660e38c-8aa5-4951-8316-c8159bf39595": {"doc_hash": "7e68af1745a7aa15184581da9ed209fbb1d6acee8b2061928f0b7f1ee932ad2b", "ref_doc_id": "baaed2f3-c76c-4532-a98f-48233d24d01c"}}, "docstore/data": {"e660e38c-8aa5-4951-8316-c8159bf39595": {"__data__": {"id_": "e660e38c-8aa5-4951-8316-c8159bf39595", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "baaed2f3-c76c-4532-a98f-48233d24d01c", "node_type": "4", "metadata": {}, "hash": "d8e5c0679f4782727ba79b58bcaacf5e3cb545b88856bee4fccfa18ff36011c9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Backend Developer Task Sheet \u2013 Video Editing Platform \nAPI \n \nProject Title: \nBuild the Backend for a Web-based Video Editing Platform \n \nObjective: \nCreate a scalable and modular backend service that allows users to upload videos, apply \nediting operations (trimming, subtitle overlay, audio modification, text/image addition), and \ndownload the rendered video. The goal is to handle video transformation using APIs, leveraging \nFFmpeg and persistent storage. \nThis task is focused solely on the backend. Frontend interaction is not required, but your API \nshould be designed as if it will be consumed by a video editor frontend. \n \nTech Stack (Strict Requirements) \nYou must use: \n\u25cf\u200b Node.js\u200b\n \n\u25cf\u200b Express.js\u200b\n \n\u25cf\u200b PostgreSQL (using Prisma ORM or Sequelize)\u200b\n \n\u25cf\u200b FFmpeg (via fluent-ffmpeg or direct shell commands)\u200b\n \n\u25cf\u200b Multer or equivalent for file uploads\u200b\n \nOptional/Recommended: \n\u25cf\u200b Cloud storage: AWS S3 or mock local storage\u200b\n \n \n\u25cf\u200b BullMQ / Redis (for background rendering jobs)\u200b\n \n\u25cf\u200b Swagger / Postman for API docs\u200b\n \n \nCore Features to Implement \n1. Video Upload Endpoint \n\u25cf\u200b POST /api/videos/upload\u200b\n \n\u25cf\u200b Accepts a video file (e.g., .mp4, .mov)\u200b\n \n\u25cf\u200b Stores metadata in the DB (video name, duration, size, status)\u200b\n \n\u25cf\u200b Save video file locally or in S3\u200b\n \nVideo Trimming / Cutting \n\u25cf\u200b POST /api/videos/:id/trim\u200b\n \n\u25cf\u200b Accepts start/end timestamps\u200b\n \n\u25cf\u200b Uses FFmpeg to create a trimmed version\u200b\n \n\u25cf\u200b Save trimmed video path and update DB\u200b\n \n \nAdd Subtitles \n\u25cf\u200b POST /api/videos/:id/subtitles\u200b\n \n\u25cf\u200b Accept subtitle text + start/end time\u200b\n \n\u25cf\u200b Overlay on video using FFmpeg\u200b\n\u200b\n \n6. Render Final Video \n \n\u25cf\u200b POST /api/videos/:id/render\u200b\n \n\u25cf\u200b Combines all changes into one final video\u200b\n \n\u25cf\u200b Saves it and updates status in DB\u200b\n \n\u25cf\u200b Optional: Trigger render via queue\u200b\n \n7. Download Final Video \n\u25cf\u200b GET /api/videos/:id/download\u200b\n \n\u25cf\u200b Returns final rendered file for download\u200b\n \n \n\u200b\n \n \n \n \nSubmission Requirements \nTo complete your submission, please provide the following: \n1.\u200b GitHub Repository Link\u200b\n Upload your project to a public or private GitHub repository. Make sure the repository:\u200b\n \n\u25cb\u200b Contains all necessary source code and assets\u200b\n \n\u25cb\u200b Includes a clear README.md with setup instructions and any relevant notes\u200b\n \n\u25cb\u200b Has clear commit history that reflects your progress\u200b\n \n2.\u200b Google Drive Link with Demo Video\u200b\n Record a short screen recording (3\u20135 minutes) of your completed project demonstrating \nall key features. The video must include a voice-over explanation walking through:\u200b\n \n\u25cb\u200b The main interface and functionality\u200b\n \n\u25cb\u200b How each feature works (e.g., uploads, editing UI, previews)\u200b\n \n\u25cb\u200b Any challenges or creative decisions made\u200b\n \n3.\u200b Upload the video to Google Drive and share the link with public or restricted access (as \npreferred). Make sure sharing permissions are correct.\u200b\n \n \nDeadline \nThe final submission is due by May 1st at 6:00 PM IST. \n\u26a0\ufe0f Important: Late submissions will not be accepted under any circumstances. \nPlease ensure both the GitHub repo and the Google Drive demo link are shared \nbefore the deadline. \n \n\ud83d\ude4b Tips \n\u25cf\u200b Think about how a real editing tool would consume your API.\u200b\n \n\u25cf\u200b Keep your FFmpeg logic modular \u2014 future enhancements should be easy.\u200b\n \n \n\u25cf\u200b Clean, consistent error handling and logging is a big plus.\u200b\n \n\u25cf\u200b If using background jobs, simulate processing time.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3336, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"baaed2f3-c76c-4532-a98f-48233d24d01c": {"node_ids": ["e660e38c-8aa5-4951-8316-c8159bf39595"], "metadata": {}}}}