{"docstore/data": {"9608d282-3f68-49c0-9f13-b62fb2d8133d": {"__data__": {"id_": "9608d282-3f68-49c0-9f13-b62fb2d8133d", "embedding": null, "metadata": {"page_label": "1", "file_name": "SDE_Assignment.pdf", "file_path": "uploads\\SDE_Assignment.pdf", "file_type": "application/pdf", "file_size": 93276, "creation_date": "2025-04-28", "last_modified_date": "2025-04-29"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text_resource": {"embeddings": null, "text": "Full Stack Developer Assignment \n \nSelect Any one from the below Project \nTech Stack: \n \n\u2022 Frontend: JavaScript-based framework (e.g., React, Next.js, Vue.js) \n\u2022 Backend: Python-based framework (e.g., FastAPI, Django, Flask) \n\u2022 Database: Any database of your choice \n \nOption 1: Live Stock Market Watchlist & Alert System \nRequirements: \n\u2022 Users should be able to search for and add stocks to their watchlist. \n\u2022 Real-time price updates should be provided using WebSockets. \n\u2022 Users should be able to set price alerts and receive email notifications. \n\u2022 Implement user authentication to ensure watchlists remain private. \n \n \nOption 2: Custom Data Pipeline for Web Scraping & Visualization \n \nRequirements: \n\u2022 Users should be able to input a website URL, and the system should scrape \nrelevant data (e.g., stock prices, news headlines). \n\u2022 The scraped data should be stored in a database and displayed as visual insights \n(charts, tables). \n\u2022 A scheduled job should update the data daily. \n\u2022 Implement JWT authentication to allow users to save custom scraping rules. \n\u2022 Can use Celery (Task Queue), Redis \n \n \nOption 3: Web Application with Django & ReactJS \nUser Portal Features: \n\u2022 Authentication: \no Login page with email/password authentication (including validation). \n\u2022 File Management: \no Users should be able to upload files. \no A table should display uploaded files with details (Filename, upload date, \nfile type \u2013 PDF, Excel, TXT). \no Users should be able to download files by clicking on the filename. \n \n\u2022 Dashboard: \no Display total files uploaded. \no Show breakdown of file types (e.g., PDF, Excel, Word). \no Show the number of files uploaded by each user. \n \n ", "path": null, "url": null, "mimetype": null}, "image_resource": null, "audio_resource": null, "video_resource": null, "text_template": "{metadata_str}\n\n{content}", "class_name": "Document", "text": "Full Stack Developer Assignment \n \nSelect Any one from the below Project \nTech Stack: \n \n\u2022 Frontend: JavaScript-based framework (e.g., React, Next.js, Vue.js) \n\u2022 Backend: Python-based framework (e.g., FastAPI, Django, Flask) \n\u2022 Database: Any database of your choice \n \nOption 1: Live Stock Market Watchlist & Alert System \nRequirements: \n\u2022 Users should be able to search for and add stocks to their watchlist. \n\u2022 Real-time price updates should be provided using WebSockets. \n\u2022 Users should be able to set price alerts and receive email notifications. \n\u2022 Implement user authentication to ensure watchlists remain private. \n \n \nOption 2: Custom Data Pipeline for Web Scraping & Visualization \n \nRequirements: \n\u2022 Users should be able to input a website URL, and the system should scrape \nrelevant data (e.g., stock prices, news headlines). \n\u2022 The scraped data should be stored in a database and displayed as visual insights \n(charts, tables). \n\u2022 A scheduled job should update the data daily. \n\u2022 Implement JWT authentication to allow users to save custom scraping rules. \n\u2022 Can use Celery (Task Queue), Redis \n \n \nOption 3: Web Application with Django & ReactJS \nUser Portal Features: \n\u2022 Authentication: \no Login page with email/password authentication (including validation). \n\u2022 File Management: \no Users should be able to upload files. \no A table should display uploaded files with details (Filename, upload date, \nfile type \u2013 PDF, Excel, TXT). \no Users should be able to download files by clicking on the filename. \n \n\u2022 Dashboard: \no Display total files uploaded. \no Show breakdown of file types (e.g., PDF, Excel, Word). \no Show the number of files uploaded by each user. \n \n "}, "__type__": "4"}, "60ec2036-f108-4923-a00c-541977f32084": {"__data__": {"id_": "60ec2036-f108-4923-a00c-541977f32084", "embedding": null, "metadata": {"page_label": "2", "file_name": "SDE_Assignment.pdf", "file_path": "uploads\\SDE_Assignment.pdf", "file_type": "application/pdf", "file_size": 93276, "creation_date": "2025-04-28", "last_modified_date": "2025-04-29"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text_resource": {"embeddings": null, "text": "\u2022 User Profile: \no Allow users to edit their username. \no Enable users to add and manage multiple addresses. \no Add/edit phone number. \n \n \n \nSubmission Guidelines \n1. Git Repository: Create a Git repository for the application and share the repo \nlink. \n2. Documentation: Include detailed instructions on how to set up and run the \napplication in the README.md file. \n ", "path": null, "url": null, "mimetype": null}, "image_resource": null, "audio_resource": null, "video_resource": null, "text_template": "{metadata_str}\n\n{content}", "class_name": "Document", "text": "\u2022 User Profile: \no Allow users to edit their username. \no Enable users to add and manage multiple addresses. \no Add/edit phone number. \n \n \n \nSubmission Guidelines \n1. Git Repository: Create a Git repository for the application and share the repo \nlink. \n2. Documentation: Include detailed instructions on how to set up and run the \napplication in the README.md file. \n "}, "__type__": "4"}}, "docstore/metadata": {"9608d282-3f68-49c0-9f13-b62fb2d8133d": {"doc_hash": "0b3a427fd0e95774a55226191dfcc04ff2b016dd203ee07e1c73e4fc455b4e8b"}, "60ec2036-f108-4923-a00c-541977f32084": {"doc_hash": "2d0a2647ce2e554cd4a79c57b11c26659fcc5897f3b2792a16e921d8ce23720c"}}}